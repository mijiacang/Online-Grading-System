                      3551115791O:7:"problem":9:{s:5:"tests";a:21:{i:0;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.0";s:6:"output";s:20:"demov1/out/sumsets.0";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:1;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.1";s:6:"output";s:20:"demov1/out/sumsets.1";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:2;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.2";s:6:"output";s:20:"demov1/out/sumsets.2";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:3;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.3";s:6:"output";s:20:"demov1/out/sumsets.3";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:4;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.4";s:6:"output";s:20:"demov1/out/sumsets.4";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:5;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.5";s:6:"output";s:20:"demov1/out/sumsets.5";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:6;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.6";s:6:"output";s:20:"demov1/out/sumsets.6";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:7;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.7";s:6:"output";s:20:"demov1/out/sumsets.7";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:8;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.8";s:6:"output";s:20:"demov1/out/sumsets.8";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:9;O:8:"testcase":7:{s:5:"input";s:19:"demov1/in/sumsets.9";s:6:"output";s:20:"demov1/out/sumsets.9";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:10;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.10";s:6:"output";s:21:"demov1/out/sumsets.10";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:11;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.11";s:6:"output";s:21:"demov1/out/sumsets.11";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:12;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.12";s:6:"output";s:21:"demov1/out/sumsets.12";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:13;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.13";s:6:"output";s:21:"demov1/out/sumsets.13";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:14;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.14";s:6:"output";s:21:"demov1/out/sumsets.14";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:15;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.15";s:6:"output";s:21:"demov1/out/sumsets.15";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:16;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.16";s:6:"output";s:21:"demov1/out/sumsets.16";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:17;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.17";s:6:"output";s:21:"demov1/out/sumsets.17";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:18;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.18";s:6:"output";s:21:"demov1/out/sumsets.18";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:19;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.19";s:6:"output";s:21:"demov1/out/sumsets.19";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}i:20;O:8:"testcase":7:{s:5:"input";s:20:"demov1/in/sumsets.20";s:6:"output";s:21:"demov1/out/sumsets.20";s:5:"imode";s:1:"1";s:5:"omode";s:1:"1";s:10:"time_limit";N;s:9:"mem_limit";N;s:6:"points";N;}}s:4:"body";s:895:"
<P>It is a well known fact that any positive interger number can be uniquely made by adding the powers of 2, each used at a maximum, once. For example, 7=1+2+4. However, a number can be made in many ways if you can use each of the powers of 2 more than once. For example to make the number 7 you can use any of the following 6 sets:<BR />
1) 1+1+1+1+1+1+1<BR />
2) 1+1+1+1+1+2<BR />
3) 1+1+1+2+2<BR />
4) 1+1+1+4<BR />
5) 1+2+2+2<BR />
6) 1+2+4<BR />
</P>
<P>
Your job is to find exactly how many ways you can make a given number using the powers of 2, any number of times. However, for larger values of number the number of ways goes on increasing very rapidly, hence you are to output only the last 9 digits in the number to prevent overflow.</P>

<P>Note :<BR />
1) 1+2+4 is same set as 2+1+4 or any possible combinations.<BR />
2) Use ans%1000000000 at every stage to prevent overflow.</P>
";s:8:"examples";a:2:{i:1;s:47:"
	The example given in the problem statement.
	";i:16;s:77:"
	Two itself can be constructed as follows.<BR />
	1) 1+1<BR />
	2) 2<BR />
	";}s:11:"constraints";a:2:{s:5:"INPUT";a:1:{i:0;s:81:"
		A number <I>N</I>, which can be any number between 1 and 1000000 inclusive.
		";}s:6:"OUTPUT";a:1:{i:0;s:159:"
		A single number <I>RESULT</I>, specifying the last 9 digits of the number of ways you can construct <I>N</I> using the powers of 2, as illustrated above.
		";}}s:6:"parser";i:0;s:6:"inside";a:5:{i:0;N;i:1;s:7:"PROBLEM";i:2;s:11:"CONSTRAINTS";i:3;s:6:"OUTPUT";i:4;s:10:"CONSTRAINT";}s:5:"depth";i:0;s:2:"id";s:2:"16";s:10:"error_func";s:5:"error";}